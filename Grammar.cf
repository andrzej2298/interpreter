------------------------------------------------------------
--                   programs                             -- 
------------------------------------------------------------

entrypoints Program ;

Program.   Program ::= [Stmt] ;

Block.     Block ::= "{" [Stmt] "}" ;

separator  Stmt "" ;

------------------------------------------------------------
--                   statements                           -- 
------------------------------------------------------------

Empty.     Stmt ::= ";" ;

---- functions

FnDef.	   Stmt ::= Type Ident "(" [Arg] ")" Block ;

ArgVal.	   Arg ::= Type Ident ;

ArgRef.	   Arg ::= Type "&" Ident ;

ArrArg.	   Arg ::= ArrayType Ident ;

separator  Arg "," ;

Ret.       Stmt ::= "return" Expr ";" ;

VRet.      Stmt ::= "return" ";" ;

-- necessary for void function application
SExp.      Stmt ::= Expr ";" ;

---- variable declarations

VarDecl.   Stmt ::= Type [Item] ";" ;

ArrayDecl. Stmt ::= ArrayType Ident "=" "{" [Expr] "}" ";" ;

NoInit.    Item ::= Ident ; 

Init.      Item ::= Ident "=" Expr ;

separator nonempty Item "," ;

---- variable assignments

Ass.       Stmt ::= Ident "=" Expr  ";" ;

Incr.      Stmt ::= Ident "++" ";" ;

Decr.      Stmt ::= Ident "--" ";" ;

---- loops and conditionals

Cond.      Stmt ::= "if" "(" Expr ")" Block ;

CondElse.  Stmt ::= "if" "(" Expr ")" Block "else" Block ;

While.     Stmt ::= "while" "(" Expr ")" Block ;

Break.     Stmt ::= "break" ";" ;

Continue.  Stmt ::= "continue" ";" ;

---- IO

Print.	   Stmt ::= "print" "(" Expr ")" ";" ;

------------------------------------------------------------
--                   types                                -- 
------------------------------------------------------------

Int.       Type ::= "int" ;

Str.       Type ::= "string" ;

Bool.      Type ::= "bool" ;

Void.      Type ::= "void" ;

Array.     ArrayType ::= Type "[]" ;

------------------------------------------------------------
--                   expressions                          -- 
------------------------------------------------------------

EVar.      Expr6 ::= Ident ;

EArrItem.  Expr6 ::= Ident "[" Expr "]" ;

EArrLen.   Expr6 ::= "len" "(" Ident ")" ;

ELitInt.   Expr6 ::= Integer ;

ELitTrue.  Expr6 ::= "true" ;

ELitFalse. Expr6 ::= "false" ;

EApp.      Expr6 ::= Ident "(" [Expr] ")" ;

EString.   Expr6 ::= String ;

Neg.       Expr5 ::= "-" Expr6 ;

Not.       Expr5 ::= "!" Expr6 ;

EMul.      Expr4 ::= Expr4 MulOp Expr5 ;

EAdd.      Expr3 ::= Expr3 AddOp Expr4 ;

ERel.      Expr2 ::= Expr2 RelOp Expr3 ;

EAnd.      Expr1 ::= Expr2 "&&" Expr1 ;

EOr.       Expr ::= Expr1 "||" Expr ;

coercions  Expr 6 ;

separator  Expr "," ;

------------------------------------------------------------
--                   operators                            -- 
------------------------------------------------------------

Plus.      AddOp ::= "+" ;

Minus.     AddOp ::= "-" ;

Times.     MulOp ::= "*" ;

Div.       MulOp ::= "/" ;

Mod.       MulOp ::= "%" ;

LTH.       RelOp ::= "<" ;

LE.        RelOp ::= "<=" ;

GTH.       RelOp ::= ">" ;

GE.        RelOp ::= ">=" ;

EQU.       RelOp ::= "==" ;

NEQ.        RelOp ::= "!=" ;

------------------------------------------------------------
--                   comments                             -- 
------------------------------------------------------------

comment    "//" ;

comment    "/*" "*/" ;

